<?php

/**
 * Implements hook_menu().
 */
function invite_menu() {
  $items['invite/item/%invite'] = array(
    'title callback' => 'invite_title',
    'title arguments' => array(2),
    'page callback' => 'invite_view',
    'page arguments' => array(2),
    'access arguments' => array('view invitations'),
  );
  $items['admin/config/people/invite'] = array(
    'title' => 'Invites',
    'page callback' => 'invite_admin_overview',
    'access arguments' => array('administer invitations'),
    'file' => 'invite.admin.inc',
  );
  $items['admin/config/people/invite/list'] = array(
    'title' => 'Inviters',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Frontend menu items
  $items['invite'] = array(
    'title' => 'Invite a friend',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('invite_form_content', 'page'),
    'access arguments' => array('send invitations'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function invite_entity_info() {
  $return['invite'] = array(
    'label' => t('Invite'),
    'base table' => 'invite',
    'uri callback' => 'invite_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'iid',
    ),
    'bundles' => array(
      'invite' => array(
        'label' => t('Invite'),
        'admin' => array(
          'path' => 'admin/config/people/invite',
          'access arguments' => array('administer invitations'),
        ),
      ),
    ),
    'static cache' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full invite'),
        'custom settings' => FALSE,
      ),
    ),
  );
  return $return;
}

/**
 * Implements hook_permission().
 */
function invite_permission() {
  return array(
    'administer invitations' => array(
      'title' => t('administer invitations'),
      'description' => t('Administer all invitations'),
    ),
    'view invitations' => array(
      'title' => t('view invitations'),
      'description' => t('View all invitations'),
    ),
    'send invitations' => array(
      'title' => t('send invitations'),
      'description' => t('Send invitations to other users.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function invite_theme($existing, $type, $theme, $path) {
  return array(
    'invite_view' => array(
      'variables' => array('invite' => NULL),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function invite_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {
  $item = menu_get_item('user/register');
  // Setting is only allowed if no other module has overridden the menu access handler for the user registration form.
  if (in_array($item['access_callback'], array('user_register_access', 'invite_user_register_access'))) { // TODO: invite_user_register_access()
    $form['registration_cancellation']['user_register']['#options']['inviteonly'] = t('New user registration by invitation only.');
  }
}

/**
 * Implements hook_menu_alter().
 */
function invite_menu_alter(&$items) {
  if (invite_user_registration_by_invite_only()) {
    $items['user/register']['access callback'] = 'invite_user_register_access'; // TODO: invite_user_register_access()
  }
}

/**
 * Determine if user registration mode is set to invite only.
 */
function invite_user_registration_by_invite_only() {
  return (variable_get('user_register', 1) === 'inviteonly');
}

/**
 * uri callback
 *
 * @param $invite
 *   A invite object.
 *
 * @return
 *   Full path for invite object.
 */
function invite_uri($invite) {
  return array(
    'path' => 'invite/item/' . $invite->iid,
  );
}

/**
 * load invitations data
 *
 * @param $value
 *   Invite object primary key or registration code.
 * @param $reg_code
 *   If FALSE, then $value is invite primary key. If TRUE, then $value is registration code.
 *
 * @return
 *   A invite object or FALSE if not available.
 */
function invite_load($value, $reg_code = FALSE) {
  $query = new EntityFieldQuery();
  if (!$reg_code) { // invite primary key
    $query
      ->entityCondition('entity_type', 'invite', '=')
      ->propertyCondition('iid', $value, '=');
  }
  else { // registration code
    $query
      ->entityCondition('entity_type', 'invite', '=')
      ->propertyCondition('reg_code', $value, '=');
  }
  $result = $query->execute();
  if ($result) {
    foreach($result['invite'] as $item) {
      $iids[] = $item->iid;
    }
    $invites = entity_load('invite', $iids);
    if (isset($invites[$iids[0]])) {
      return $invites[$iids[0]];
    }
  }
  else {
    return FALSE;
  }
}

/**
 * invite title callback
 *
 * @param $invite
 *   A invite object.
 *
 * @return
 *   Title text for view invitations page
 */
function invite_title($invite) {
  return t('View invitations: @email', array('@email' => $invite->email));
}

/**
 * Generate the invite forms - common fields
 *
 * @param $view
 *   Form view mode.
 */
function invite_form_content($form, &$form_state, $view = 'page') {
  global $user;
  $form['iid'] = array(
    '#type' => 'value',
  );
  switch ($view) {
    case 'page':
      $form += invite_form_page($form, $form_state, $user);
      break;
  }
  $form['reg_code'] = array(
    '#type' => 'value',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send invite'),
  );
  $form['#validate'][] = 'invite_form_validate';
  $form['#submit'][] = 'invite_form_submit';
  return $form;
}

/**
 * Invite form - page view
 */
function invite_form_page($form, &$form_state, $user) {
  $form['from'] = array(
    '#type' => 'item',
    '#title' => t('From:'),
    '#required' => TRUE,
    '#markup' => check_plain($user->mail),
  );
  $form['to'] = array(
    '#type' => 'textfield',
    '#title' => t('To:'),
    '#required' => TRUE,
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject:'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * form validation
 */
function invite_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['to'])) {
    form_set_error('to', t('Valid email adress required!'));
  }
}

/**
 * view invitations page
 *
 * @param $invite
 *   A invite object.
 */
function invite_view($invite) {
  return array(
    '#theme' => 'invite_view',
    '#invite' => $invite,
  );
}

/**
 * view invitations page - theme function
 */

function theme_invite_view($variables = NULL) {
  kpr($variables); // TODO: debug function!
}
