<?php

/**
 * Implements hook_menu().
 */
function invite_menu() {
  $items['invite/%invite'] = array(
    'title callback' => 'invite_title',
    'title arguments' => array(1),
    'page callback' => 'invite_item_view',
    'page arguments' => array(1),
    'access arguments' => array('view invitations'),
  );
  $items['admin/config/people/invite'] = array(
    'title' => 'Invites',
    'page callback' => 'invite_admin_overview',
    'access arguments' => array('administer invitations'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'invite.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_entity_info().
 */
function invite_entity_info() {
  $return['invite'] = array(
    'label' => t('Invite'),
    'base table' => 'invite',
    'uri callback' => 'invite_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'iid',
    ),
    'bundles' => array(
      'invite' => array(
        'label' => t('Invite'),
        'admin' => array(
          'path' => 'admin/config/people/invite',
          'access arguments' => array('administer invitations'),
        ),
      ),
    ),
    'static cache' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full invite'),
        'custom settings' => FALSE,
      ),
    ),
  );
  return $return;
}

/**
 * Implements hook_permission().
 */
function invite_permission() {
  return array(
    'administer invitations' => array(
      'title' => t('administer invitations'),
      'description' => t('Administer all invitations'),
    ),
    'view invitations' => array(
      'title' => t('view invitations'),
      'description' => t('View all invitations'),
    ),
    'send invitations' => array(
      'title' => t('send invitations'),
      'description' => t('Send invitations to other users.'),
    ),
  );
}

/**
 * uri callback
 *
 * @param $invite
 *   A invite object.
 *
 * @return
 *   Full path for invite object.
 */
function invite_uri($invite) {
  return array(
    'path' => 'invite/item/' . $invite->iid,
  );
}

/**
 * load invitations data
 *
 * @param $value
 *   Invite object primary key or registration code.
 * @param $reg_code
 *   If FALSE, then $value is invite primary key. If TRUE, then $value is registration code.
 *
 * @return
 *   A invite object or FALSE if not available.
 */
function invite_load($value, $reg_code = FALSE) {
  $query = new EntityFieldQuery();
  if (!$reg_code) { // invite primary key
    $query
      ->entityCondition('entity_type', 'invite', '=')
      ->propertyCondition('iid', $value, '=');
  }
  else { // registration code
    $query
      ->entityCondition('entity_type', 'invite', '=')
      ->propertyCondition('reg_code', $value, '=');
  }
  $result = $query->execute();
  if ($result) {
    foreach($result['invite'] as $item) {
      $iids[] = $item->iid;
    }
    $invites = entity_load('invite', $iids);
    return $invites;
  }
  else {
    return FALSE;
  }
}
